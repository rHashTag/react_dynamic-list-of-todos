{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todoList","handleSelectUser","selectedUserId","useState","filteredTodos","setFilteredTodos","title","setTitle","option","setOption","selectedTodoId","setSelectedTodoId","useEffect","filter","todo","includes","completed","className","htmlFor","id","type","value","onChange","event","target","map","cn","checked","readOnly","onClick","userId","request","url","fetch","then","response","ok","Error","status","statusText","json","fetchTodos","a","result","fetchUsers","CurrentUser","user","setUser","getUser","useCallback","userFromServer","name","email","phone","App","setSelectedUserId","todosFromServer","setTodosFromServer","onSelectUser","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cbb2e32.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  todoList: Todo[];\n  handleSelectUser: (userId: number) => void;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todoList,\n  handleSelectUser,\n  selectedUserId,\n}) => {\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n\n  const [title, setTitle] = useState('');\n  const [option, setOption] = useState('all');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  useEffect(\n    () => {\n      setFilteredTodos(todoList.filter(todo => {\n        if (todo.title.includes(title)) {\n          switch (option) {\n            case 'completed':\n              return todo.completed;\n            case 'active':\n              return !todo.completed;\n            default:\n              return true;\n          }\n        }\n\n        return false;\n      }));\n    },\n    [title, option],\n  );\n\n  useEffect(\n    () => {\n      if (selectedUserId === 0) {\n        setSelectedTodoId(0);\n      }\n    },\n    [selectedUserId],\n  );\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div>\n        <label htmlFor=\"title-filter\">Filter by title: </label>\n        <input\n          id=\"title-filter\"\n          type=\"text\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n        />\n\n        <select\n          onChange={event => {\n            setOption(event.target.value);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"active\">Active</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map((todo: Todo) => (\n            <li\n              key={todo.id}\n              className={cn('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                onClick={() => {\n                  handleSelectUser(todo.userId);\n                  setSelectedTodoId(todo.id);\n                }}\n                className={cn(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                    selectedTodoId === todo.id,\n                  },\n                )}\n                type=\"button\"\n              >\n                {`User: ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const fetchTodos = async () => {\n  const result = await request('/todos');\n\n  return result;\n};\n\nexport const fetchUsers = async (selectedUserId: number) => {\n  const result = await request(`/users/${selectedUserId}`);\n\n  return result;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { fetchUsers } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number;\n  handleSelectUser: (userId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId,\n  handleSelectUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const getUser = useCallback(async (id: number) => {\n    try {\n      const userFromServer = await fetchUsers(id);\n\n      if (userFromServer.id) {\n        setUser(userFromServer);\n      }\n    } catch {\n      setUser(null);\n    }\n  }, [selectedUserId]);\n\n  useEffect(\n    () => {\n      getUser(selectedUserId);\n    },\n    [selectedUserId],\n  );\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`User #${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        className=\"CurrentUser__clear\"\n        type=\"button\"\n        onClick={() => handleSelectUser(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { fetchTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n\n  useEffect(\n    () => {\n      fetchTodos()\n        .then(response => {\n          return setTodosFromServer(response);\n        });\n    },\n    [],\n  );\n\n  const onSelectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      {todosFromServer.length && (\n        <div className=\"App__sidebar\">\n          <TodoList\n            todoList={todosFromServer}\n            handleSelectUser={onSelectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n      )}\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              handleSelectUser={onSelectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}